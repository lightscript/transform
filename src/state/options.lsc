import { PluginList } from '@lightscript/parser'

export compilerOptions = {
  stdlib: {
    description: "Configure the LightScript standard library"
  }
  patternMatching: {
    description: "Test and branch using `match` keyword"
    valueType: "boolean"
    defaultValue: true
  }
  bangCall: {
    description: "Call functions with paren-free syntax using `!`"
    valueType: "boolean"
    defaultValue: true
  }
  useRequire: {
    description: "Generate `require` rather than `import` when the compiler introduces a module."
    valueType: "boolean"
  }
  flippedImports: {
    description: "Allow imports via `import 'path': [specifier]` syntax."
    valueType: "boolean"
  }
  placeholderArgs: {
    description: "Specify arguments for a function using placeholders in the body."
    valueType: "boolean"
  }
  placeholder: {
    description: "Specify an identifier to be transformed into PlaceholderExpression."
    valueType: "string"
    defaultValue: "_"
  }
  disableJsx: {
    description: "Don't parse JSX expressions."
    valueType: "boolean"
  }
  disableFlow: {
    description: "Don't parse Flow type annotations."
    valueType: "boolean"
  }
  _decoratorParsing: {
    description: "Override decorator parsing. (For diagnostic purposes only; in an ordinary build chain you would use the preset to configure decorator parsing.)"
    valueType: "options"
    options: [
      "none"
      "legacy"
      "decoratorsBeforeExport"
      "noDecoratorsBeforeExport"
    ]
    defaultValue: "legacy"
  }
}

export isNonceFilename(filename) ->
  (not filename) or
  filename === "<input>" or // eslint
  filename === "<text>" or // eslint
  filename === "repl"// babel-node

getFileTypeInfo(filename) ->
  if not filename: return { isLightScript: true, isLSX: false }

  if filename.includes(".lsx"): return { isLightScript: true, isLSX: true }

  if (
    filename~isNonceFilename() or // Assume unknown text is LightScript
    filename.includes(".lsc")
  ): return { isLightScript: true, isLSX: false }

  return { isLightScript: false, isLSX: false }

export class Options:
  constructor(state) ->
    this.state = state

  setOptions(babelOpts, parserOpts, lscOpts): void ->
    this.babelOpts = babelOpts or {}
    this.parserOpts = parserOpts or {}
    this.lscOpts = Object.assign({}, lscOpts or {})

    this.fileTypeInfo = getFileTypeInfo(babelOpts.filename)

    // Attempt to determine if the input is LightScript
    if this.fileTypeInfo.isLightScript and (lscOpts.isLightScript == undefined):
      this.isLightScript = true
    elif lscOpts.isLightScript:
      this.isLightScript = true
    else:
      this.isLightScript = false

  setPreParseOptions(parserOpts, configurationDirectives): void ->
    this.parserOpts = parserOpts or this.parserOpts

    // Merge config directives into lsc options
    this.configurationDirectives = configurationDirectives
    if configurationDirectives.isLightScript~looseNotEq(null):
      this.isLightScript = configurationDirectives.isLightScript
    this.lscOpts = Object.assign(this.lscOpts, this.configurationDirectives)

  getParserOptions() ->
    pluginOpts = this.lscOpts or {}

    opts = Object.assign({}, this.parserOpts)
    delete opts.lscCompiler // not needed in parser

    // Don't alter parser plugins if file is not LSC.
    if not this.isLightScript: return opts

    pluginList = new PluginList()
    pluginList.addPlugins(opts.plugins or [])

    // Don't alter parser plugins if file is not LSC.
    if not this.isLightScript: return opts

    pluginList.addPlugin("objectRestSpread")
    pluginList.addPlugin("asyncGenerators")
    pluginList.addPlugin("classProperties")
    pluginList.addPlugin("optionalCatchBinding")
    pluginList.addPlugin("optionalChaining")
    pluginList.addPlugin("throwExpressions")

    // Decorator plugin (attempt to duplicate configuration from the preset)
    if pluginOpts.decoratorOpts:
      if pluginOpts.decoratorOpts.legacy:
        pluginList.addPlugin("decorators-legacy")
      else:
        pluginList.addPlugin(["decorators", { decoratorsBeforeExport: pluginOpts.decoratorOpts.decoratorsBeforeExport }])
    elif pluginOpts._decoratorParsing:
      // Diagonstic option
      match pluginOpts._decoratorParsing:
        | "legacy": pluginList.addPlugin("decorators-legacy")
        | "decoratorsBeforeExport":
          pluginList.addPlugin(["decorators", { decoratorsBeforeExport: true }])
        | "noDecoratorsBeforeExport":
          pluginList.addPlugin(["decorators", { decoratorsBeforeExport: false }])
        | else: null
    else:
      // Enable legacy decorators by default
      pluginList.addPlugin("decorators-legacy")


    // Mandatory LightScript plugins
    pluginList.addPlugins([
      "tryCatch", "tildeCall", "disableBitwiseOperators"
      "significantWhitespace", "modifiedLogicalOperators", "seqExprRequiresParen",
      "lscCoreSyntax", "lscIf", "lscIfExpression", "lscTryExpression"
      "lscAssignment", "lscArrows", "lscForIn", "awaitArrow", "safeAwaitArrow",
      "spreadLoop", "questionSubscripts"
    ])

    // Optional plugins
    if not pluginOpts.disableJsx: pluginList.addPlugin("jsx")
    if not pluginOpts.disableFlow: pluginList.addPlugin("flow")
    if pluginOpts.patternMatching != false: pluginList.addPlugin("match")
    if pluginOpts.bangCall != false: pluginList.addPlugin("bangCall")
    if pluginOpts.flippedImports: pluginList.addPlugin("flippedImports")
    if pluginOpts.placeholderArgs: pluginList.addPlugin("syntacticPlaceholders")
    if pluginOpts.placeholder:
      opts.placeholder = pluginOpts.placeholder

    opts.plugins = pluginList.toBabelPluginList()

    opts

  inlinedOperatorsEnabled(): boolean ->
    if not this.isLightScript: return false
    opts = this.lscOpts
    not ((opts.stdlib === false) or (typeof opts.stdlib === "object" && opts.stdlib.lightscript === false))

  placeholderArgsEnabled(): boolean ->
    opts = this.lscOpts
    opts.placeholderArgs

  lodashEnabled(): boolean ->
    if not this.isLightScript: return false
    { lscOpts: opts } = this

    if typeof(opts.stdlib) == "object":
      if opts.stdlib.lodash:
        return true

    false
