import {
  replaceWithPlainFunction
  replaceWithArrowFunction
  replaceWithBoundFunction
} from "../helpers/functions"
import t from "../types"

import { placeAtNode as atNode, placeTreeAtLocWhenUnplaced as allAtLoc, getLoc, placeAtLoc as atLoc, getSurroundingLoc } from 'ast-loc-utils'

export transformNamedArrowFunction(path): void ->
  if (path.node.skinny):
    replaceWithPlainFunction(path)
  elif (path.node.generator):
    // there are no arrow-generators in ES6, so can't compile to arrow
    replaceWithBoundFunction(path)
  else:
    replaceWithArrowFunction(path)

export transformNamedArrowMemberExpression(path): void ->
  let object = path.node.object
  let node = path.node
  delete node.object
  node.type = "LscNamedArrowExpression"

  if (!node.skinny) {
    node.skinny = true;  // binding here, don't turn into arrow
    now node = t.callExpression(
      t.memberExpression(node, t.identifier("bind")),
      [object]
    )~allAtLoc(getLoc(object))
  }

  path.replaceWith(t.assignmentExpression("=",
    t.memberExpression(object, path.node.id)~atLoc(getSurroundingLoc([object, path.node.id]))
    node
  )~atNode(node))

export transformArrowFunctionExpression(path): void ->
  if (path.node.skinny):
    replaceWithPlainFunction(path)
  elif (path.node.generator):
    replaceWithBoundFunction(path)
