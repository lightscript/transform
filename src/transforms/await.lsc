import t, { isa } from "../types"

export transformAwaitExpression(path): void ->
  if (path.get("argument")~isa("ArrayExpression")):
    promiseDotAllCall = t.callExpression(
      t.memberExpression(t.identifier("Promise"), t.identifier("all")),
      [path.node.argument],
    );
    path.get("argument").replaceWith(promiseDotAllCall);

export transformSafeAwaitExpression(path): void ->
  { node } = path
  if path.parent~isa("ExpressionStatement"):
    tryStmt = t.tryStatement(t.blockStatement([t.expressionStatement(t.awaitExpression(node.argument))]))
    path.parentPath.replaceWith(tryStmt)
  else:
    tryExpr = t.LscTryExpression(t.awaitExpression(node.argument))
    path.replaceWith(tryExpr)
