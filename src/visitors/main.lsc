import { checkImplicitConstShadowing } from '../helpers/variables'
import { transformForInArrayStatement, transformForInObjectStatement, maybeTransformAutoConstDeclaration } from "../transforms/for"
import { transformTildeCall, transformOptionalTildeCall } from '../transforms/tildeCalls'
import { maybeReplaceWithInlinedOperator } from '../transforms/inlinedOperators'
import { transformTryExpression, transformTryStatement } from "../transforms/try"
import { transformNamedArrowFunction, transformNamedArrowMemberExpression, transformArrowFunctionExpression } from "../transforms/arrows"
import { transformClassBody } from "../transforms/classes"
import { maybeTransformArrayWithSpreadLoops, maybeTransformObjectWithSpreadLoops, maybeTransformJSXExpressionWithSpreadLoop, transformSpreadElement } from "../transforms/spreadLoops"

export default mainPass(state, path): void ->
  path.traverse({
    JSXExpressionContainer(path): void ->
      maybeTransformJSXExpressionWithSpreadLoop(path)

    ArrayExpression(path): void ->
      maybeTransformArrayWithSpreadLoops(path)

    ObjectExpression(path): void ->
      // ObjectExpression may get replaced with an IIFE here.
      if maybeTransformObjectWithSpreadLoops(path): path.resync()

    SpreadElement(path): void ->
      transformSpreadElement(path)

    LscNamedArrowFunction(path): void ->
      transformNamedArrowFunction(path)

    LscNamedArrowMemberExpression(path): void ->
      transformNamedArrowMemberExpression(path)

    ArrowFunctionExpression(path): void ->
      transformArrowFunctionExpression(path)

    ClassBody(path): void ->
      transformClassBody(path)

    LscForInArrayStatement(path): void ->
      transformForInArrayStatement(path)

    LscForInObjectStatement(path): void ->
      transformForInObjectStatement(path);

    LscTildeCallExpression(path): void ->
      transformTildeCall(path)

    LscOptionalTildeCallExpression(path): void ->
      transformOptionalTildeCall(path)

    CallExpression(path): void ->
      maybeReplaceWithInlinedOperator(state, path)

    ForOfStatement(path): void ->
      maybeTransformAutoConstDeclaration(path)

    ForInStatement(path): void ->
      maybeTransformAutoConstDeclaration(path)

    LscTryExpression(path): void ->
      transformTryExpression(path)

    TryStatement(path): void ->
      transformTryStatement(path)

    VariableDeclaration(path): void ->
      checkImplicitConstShadowing(path)
  })
