import { checkImplicitConstShadowing } from '../helpers/variables'
import { transformForInArrayStatement, transformForInObjectStatement, maybeTransformAutoConstDeclaration } from "../transforms/for"
import { transformTildeCall, transformOptionalTildeCall } from '../transforms/tildeCalls'
import { maybeReplaceWithInlinedOperator } from '../transforms/inlinedOperators'
import { transformTryExpression, transformTryStatement } from "../transforms/try"
import { transformNamedArrowFunction, transformNamedArrowMemberExpression, transformArrowFunctionExpression } from "../transforms/arrows"
import { transformClassBody, transformObjectMethod } from "../transforms/classes"
import { maybeTransformArrayWithSpreadLoops, maybeTransformObjectWithSpreadLoops, maybeTransformJSXExpressionWithSpreadLoop, transformSpreadElement } from "../transforms/spreadLoops"
import { transformIfExpression } from "../transforms/if"
import { enterFunction, exitFunction } from "../transforms/functions"
import { transformAssignmentExpression } from "../transforms/assignments"
import { transformAwaitExpression, transformSafeAwaitExpression } from "../transforms/await"
import { transformMatchExpression, transformMatchStatement } from "../transforms/match"
import { transformAllPlaceholders } from "../transforms/placeholders"

export default main(state, path): void ->
  // Placeholders must be transformed first
  if state.options.placeholderArgsEnabled():
    transformAllPlaceholders(path)

  path.traverse({
    Function: {
      enter(path): void -> enterFunction(path)
      exit(path): void -> exitFunction(path)
    }

    LscSafeAwaitExpression(path): void ->
      transformSafeAwaitExpression(path)

    AwaitExpression(path): void ->
      transformAwaitExpression(path)

    AssignmentExpression(path): void ->
      transformAssignmentExpression(path)

    LscIfExpression(path): void ->
      transformIfExpression(path)

    JSXExpressionContainer(path): void ->
      maybeTransformJSXExpressionWithSpreadLoop(path)

    ArrayExpression(path): void ->
      maybeTransformArrayWithSpreadLoops(path)

    ObjectExpression(path): void ->
      // ObjectExpression may get replaced with an IIFE here.
      if maybeTransformObjectWithSpreadLoops(path): path.resync()

    SpreadElement(path): void ->
      transformSpreadElement(path)

    LscNamedArrowFunction(path): void ->
      transformNamedArrowFunction(path)

    LscNamedArrowMemberExpression(path): void ->
      transformNamedArrowMemberExpression(path)

    ArrowFunctionExpression(path): void ->
      transformArrowFunctionExpression(path)

    ClassBody(path): void ->
      transformClassBody(path)

    ObjectMethod(path): void ->
      transformObjectMethod(path)

    LscForInArrayStatement(path): void ->
      transformForInArrayStatement(path)

    LscForInObjectStatement(path): void ->
      transformForInObjectStatement(path);

    LscTildeCallExpression(path): void ->
      transformTildeCall(path)

    LscOptionalTildeCallExpression(path): void ->
      transformOptionalTildeCall(path)

    CallExpression(path): void ->
      maybeReplaceWithInlinedOperator(state, path)

    ForOfStatement(path): void ->
      maybeTransformAutoConstDeclaration(path)

    ForInStatement(path): void ->
      maybeTransformAutoConstDeclaration(path)

    LscTryExpression: {
      exit(path): void -> transformTryExpression(path)
    }

    TryStatement(path): void ->
      transformTryStatement(path)

    VariableDeclaration(path): void ->
      checkImplicitConstShadowing(path)

    ReferencedIdentifier(path): void ->
      state.imports.maybeProcessStdlibIdentifier(path)

    LscMatchExpression(path): void ->
      transformMatchExpression(path, state)

    LscMatchStatement(path): void ->
      transformMatchStatement(path, state)
  })

  // Add implicit imports
  state.imports.insertImports(path)
